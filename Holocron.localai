# Star Citizen Inventory Management System - Holocron

## Project Overview
Python-based organizational inventory management app for Star Citizen. Web-hosted, Docker-based, PostgreSQL database. Core pillars: inventory tracking, planning/crafting, resource optimization, open integrations, analytics (consent-based).

## Lightning Stack
- Backend: FastAPI (Python 3.11+), PostgreSQL 15+, Redis, Celery
- Frontend: React 18+ TypeScript, Blueprint.js (@blueprintjs/core)
- Infrastructure: Docker Compose, Nginx, GitHub Actions CI/CD
- Auth: JWT tokens
- Data: SQLAlchemy, Alembic migrations, Pydantic validation

## Key Architecture Decisions
- FastAPI for async performance and auto-docs
- PostgreSQL for ACID compliance and complex queries
- React/TypeScript for frontend
- Blueprint.js for UI framework (optimized for data-dense interfaces)
- Docker Compose (initially), designed for K8s migration
- Monolithic FastAPI app with service boundaries for future microservices
- REST API primary, WebSocket for real-time features
- GlitchTip for error tracking (self-hosted, Sentry-compatible, zero cost)
- Brevo SMTP relay for email (free tier, low-op, SES optional alternative)
- CDN/static strategy: Local Nginx static with optional Cloudflare Free; hashed immutable assets
- SSL: Let's Encrypt via Certbot (HTTP-01 or Cloudflare DNS-01); Caddy as alternative
- DB backups: Daily pg_dump + Restic with retention; weekly verification restore; optional pgBackRest later
- Public Commons: Submissions + moderation (curator/moderator), versioned public entities, public read APIs

## Core Database Entities
Users, Organizations, Items, Locations, ItemStocks, Recipes, Crafts, Goals, ResourceSources, Integrations, UsageEvents (consent-based).

## Implementation Status
Phase 0 Week 1-2: Docker & development environment setup complete. Multi-stage Dockerfiles (backend/frontend), docker-compose.yml with PostgreSQL/Redis/Backend/Frontend/Nginx, nginx reverse proxy config, .env.example created. Backend: FastAPI with CORS, config using pydantic-settings. Frontend: React 18 + TypeScript + Vite scaffold with proper ESM config. All services tested and working. Comprehensive documentation created: root README.md, backend/README.md, frontend/README.md, docs/getting-started/installation.md. Ready for Phase 1.

## Documentation Requirements
Comprehensive README files maintained throughout implementation. Root README, backend/README, frontend/README, and detailed docs/ directory. Documentation updated in each phase alongside features. Include end-user guides for each UI feature and an in-app tutorial/onboarding flow.

## Next Steps
Phase 1 Week 3: Database schema & migrations (Alembic setup, User/Organization models, initial migrations).


## Repo Meta
status=github_repo_created_and_pushed
default_branch=main
remote.origin.pending=false
intended_github_repo=SCIMS
github_repo_url=https://github.com/Comnyando/SCIMS
last_push=main
created_files=.gitignore
initial_commit_message=chore: initialize repo with planning docs and Holocron
workspace_root=D:\\Comn 2\\Code\\SCIMS

## Branch Protection
desired_rules=resolve_conversations:true,block_force_push:true,allow_delete:true
apply_status=applied_to_main_relaxed
applied_branch=main
enforce_admins=true
require_pull_requests=false
require_code_owner_reviews=false
require_conversation_resolution=true
allow_force_pushes=false
allow_deletions=true
require_signed_commits=false
lock_branch=false
allow_fork_syncing=false

## CODEOWNERS
path=/.github/CODEOWNERS
rule="* @Comnyando"
pr_opened=https://github.com/Comnyando/SCIMS/pull/1
merge_path=requires_review_by_codeowner

## Scaffold
created_dirs=backend/app/{models,schemas,fazer,services},backend/alembic,backend/tests,frontend/src/{components,pages,services,hooks,types},frontend/public,nginx
created_files=.env.example,README.md,backend/{Dockerfile,requirements.txt},backend/app/{__init__.py,main.py,config.py,database.py},docker-compose.yml,docker-compose.prod.yml,frontend/{Dockerfile,package.json},nginx/nginx.conf
commit_ref=f9b8c97
commit_message=feat: scaffold project structure per implementation roadmap